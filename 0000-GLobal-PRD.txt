# Global Product Requirements Document (PRD)

## Project: AI-Powered Network Automation Assistant

This document outlines the planned features for development. The features are ordered by priority, which is determined by dependencies and immediate user value.

### Development Order & Feature List

1.  **Feature: Persistent Conversation History (ID: 0200)**
    - Description: Save chat sessions to a database so users can resume conversations later. This is foundational for stateful interactions.

2.  **Feature: User Authentication (ID: 0300)**
    - Description: Implement a secure login system. This is a prerequisite for user-specific data and permissions.

3.  **Feature: Role-Based Access Control (RBAC) (ID: 0400)**
    - Description: Restrict access to features based on user roles (e.g., Admin, Operator). Depends on User Authentication.

4.  **Feature: Real-time Streaming Chat Responses (ID: 0100)**
    - Description: Show AI responses as they are being generated for a better user experience. Improves perceived performance.

5.  **Feature: Pre-built Command Library (ID: 0500)**
    - Description: Provide users with a searchable library of common network commands and templates.

6.  **Feature: Natural Language to Network Command Translation (ID: 0600)**
    - Description: Allow users to describe a task in plain English, which the AI translates into executable commands.

7.  **Feature: Configuration Validation and Dry-Run (ID: 0700)**
    - Description: Before applying any configuration, validate its syntax and perform a "dry run" to predict its impact.

8.  **Feature: Enhanced RAG with More Sources (ID: 0900)**
    - Description: Expand RAG to ingest data from network monitoring tools, external documentation, or APIs.

9.  **Feature: Visual Network Topology Mapping (ID: 0800)**
    - Description: Generate and display interactive diagrams of the network topology.

10. **Feature: Extensible Plugin Architecture (ID: 1000)**
    - Description: Create a system that allows third-party developers to add new functionalities as plugins.

### Development Environment Setup (2025-07-06)

To ensure the application starts correctly and IDE features work (IntelliSense, linting, debugging), follow these steps:

1. **Virtual Environment**  
   The project provides a Python virtual environment in the repository root (`/venv`). If it is missing, create one:
   ```bash
   python3 -m venv venv
   source venv/bin/activate
   pip install -r GENAI_AGENT03-CRITAL-MASS/requirements.txt
   ```
   The updated `run_app.sh` automatically detects this environment (either in the project root or one level up) and activates it.

2. **VS Code / IDE Interpreter Selection**  
   Point your IDE to the interpreter located at `venv/bin/python`. In VS Code, open the Command Palette → *Python: Select Interpreter* and choose the path ending in `venv`.

3. **Common Startup Issues & Fixes**  
   * *Port already in use* – `run_app.sh` now frees port **5003** automatically.  
   * *Invalid interpreter* – ensure the selected interpreter matches the virtual environment.  
   * *Missing packages* – run `pip install -r requirements.txt` inside the activated venv.

4. **Running the App**  
   ```bash
   ./GENAI_AGENT03-CRITAL-MASS/run_app.sh
   ```
   The script prints URLs for health checks and the dashboard and writes logs to `GENAI_AGENT03-CRITAL-MASS/data/logs`. 